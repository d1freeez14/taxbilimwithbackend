// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id            String    @id @default(cuid())
  email         String    @unique
  name          String?
  avatar        String?
  role          UserRole  @default(STUDENT)
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt
  
  // Relations
  enrollments   Enrollment[]
  certificates  Certificate[]
  reviews       Review[]
  progress      LessonProgress[]
  favorites     CourseFavorite[]
  
  @@map("users")
}

model Author {
  id          String   @id @default(cuid())
  name        String
  avatar      String?
  bio         String?
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  
  // Relations
  courses     Course[]
  
  @@map("authors")
}

model Course {
  id            String   @id @default(cuid())
  title         String
  description   String
  imageSrc      String
  price         Decimal  @db.Decimal(10, 2)
  bg            String?  @default("white")
  isPublished   Boolean  @default(false)
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt
  
  // Features and content
  features      String[] // JSON array
  whatYouLearn  String[] // JSON array
  
  // Relations
  authorId      String
  author        Author   @relation(fields: [authorId], references: [id], onDelete: Cascade)
  modules       Module[]
  enrollments   Enrollment[]
  reviews       Review[]
  favorites     CourseFavorite[]
  
  @@map("courses")
}

model Module {
  id          String   @id @default(cuid())
  title       String
  order       Int
  courseId    String
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  
  // Relations
  course      Course   @relation(fields: [courseId], references: [id], onDelete: Cascade)
  lessons     Lesson[]
  
  @@map("modules")
}

model Lesson {
  id          String   @id @default(cuid())
  title       String
  content     String?
  videoUrl    String?
  order       Int
  moduleId    String
  duration    Int?     // in minutes
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  
  // Relations
  module      Module   @relation(fields: [moduleId], references: [id], onDelete: Cascade)
  progress    LessonProgress[]
  
  @@map("lessons")
}

model Enrollment {
  id          String   @id @default(cuid())
  userId      String
  courseId    String
  enrolledAt  DateTime @default(now())
  completedAt DateTime?
  
  // Relations
  user        User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  course      Course   @relation(fields: [courseId], references: [id], onDelete: Cascade)
  
  @@unique([userId, courseId])
  @@map("enrollments")
}

model LessonProgress {
  id          String   @id @default(cuid())
  userId      String
  lessonId    String
  completed   Boolean  @default(false)
  completedAt DateTime?
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  
  // Relations
  user        User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  lesson      Lesson   @relation(fields: [lessonId], references: [id], onDelete: Cascade)
  
  @@unique([userId, lessonId])
  @@map("lesson_progress")
}

model Certificate {
  id          String   @id @default(cuid())
  userId      String
  courseId    String
  issuedAt    DateTime @default(now())
  certificateUrl String?
  
  // Relations
  user        User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  course      Course   @relation(fields: [courseId], references: [id], onDelete: Cascade)
  
  @@unique([userId, courseId])
  @@map("certificates")
}

model Review {
  id          String   @id @default(cuid())
  userId      String
  courseId    String
  rating      Int      @db.SmallInt
  comment     String?
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  
  // Relations
  user        User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  course      Course   @relation(fields: [courseId], references: [id], onDelete: Cascade)
  
  @@unique([userId, courseId])
  @@map("reviews")
}

model CourseFavorite {
  id          String   @id @default(cuid())
  userId      String
  courseId    String
  createdAt   DateTime @default(now())
  
  // Relations
  user        User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  course      Course   @relation(fields: [courseId], references: [id], onDelete: Cascade)
  
  @@unique([userId, courseId])
  @@map("course_favorites")
}

enum UserRole {
  STUDENT
  TEACHER
  ADMIN
} 
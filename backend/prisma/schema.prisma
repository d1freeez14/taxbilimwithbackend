// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id            String    @id @default(cuid())
  email         String    @unique
  name          String?
  avatar        String?
  role          UserRole  @default(STUDENT)
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt
  
  // Relations
  enrollments   Enrollment[]
  certificates  Certificate[]
  reviews       Review[]
  progress      LessonProgress[]
  favorites     CourseFavorite[]
  testAttempts  TestAttempt[]
  
  @@map("users")
}

model Author {
  id          String   @id @default(cuid())
  name        String
  avatar      String?
  bio         String?
  description String?  // Additional description field
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  
  // Relations
  courses     Course[]
  
  @@map("authors")
}

model Course {
  id            String   @id @default(cuid())
  title         String
  description   String
  imageSrc      String
  price         Decimal  @db.Decimal(10, 2)
  bg            String?  @default("white")
  isPublished   Boolean  @default(false)
  progress      Int      @default(0) // Progress percentage (0-100)
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt
  
  // Course statistics
  moduleCount   Int      @default(0) // Number of modules
  lessonCount   Int      @default(0) // Number of video lessons
  totalDuration Int      @default(0) // Total duration in minutes
  
  // Features and content
  features      String[] // JSON array
  whatYouLearn  String[] // JSON array
  
  // Relations
  authorId      String
  author        Author   @relation(fields: [authorId], references: [id], onDelete: Cascade)
  modules       Module[]
  enrollments   Enrollment[]
  reviews       Review[]
  favorites     CourseFavorite[]
  
  @@map("courses")
}

model Module {
  id          String   @id @default(cuid())
  title       String
  order       Int
  courseId    String
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  
  // Module statistics
  lessonCount   Int      @default(0) // Number of video lessons
  assignmentCount Int    @default(0) // Number of assignments
  totalDuration Int      @default(0) // Total duration in minutes
  durationWeeks Int      @default(1) // Duration in weeks
  
  // Relations
  course      Course   @relation(fields: [courseId], references: [id], onDelete: Cascade)
  lessons     Lesson[]
  
  @@map("modules")
}

model Lesson {
  id          String     @id @default(cuid())
  title       String
  content     String?
  videoUrl    String?
  order       Int
  moduleId    String
  duration    Int?       // in minutes
  image       String?    // Lesson image/thumbnail
  locked      Boolean    @default(false) // Whether lesson is locked
  lessonType  LessonType @default(VIDEO) // Type of lesson
  testId      String?    // Reference to test if lesson type is TEST
  url         String?    // Custom URL for lesson navigation
  createdAt   DateTime   @default(now())
  updatedAt   DateTime   @updatedAt
  
  // Relations
  module      Module     @relation(fields: [moduleId], references: [id], onDelete: Cascade)
  progress    LessonProgress[]
  test        Test?      @relation(fields: [testId], references: [id], onDelete: SetNull)
  
  @@map("lessons")
}

model Enrollment {
  id          String   @id @default(cuid())
  userId      String
  courseId    String
  enrolledAt  DateTime @default(now())
  completedAt DateTime?
  isRecorded  Boolean  @default(true) // Whether the course is recorded or live
  
  // Relations
  user        User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  course      Course   @relation(fields: [courseId], references: [id], onDelete: Cascade)
  
  @@unique([userId, courseId])
  @@map("enrollments")
}

model LessonProgress {
  id          String   @id @default(cuid())
  userId      String
  lessonId    String
  completed   Boolean  @default(false)
  completedAt DateTime?
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  
  // Relations
  user        User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  lesson      Lesson   @relation(fields: [lessonId], references: [id], onDelete: Cascade)
  
  @@unique([userId, lessonId])
  @@map("lesson_progress")
}

model Certificate {
  id          String   @id @default(cuid())
  userId      String
  courseId    String
  issuedAt    DateTime @default(now())
  certificateUrl String?
  
  // Relations
  user        User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  course      Course   @relation(fields: [courseId], references: [id], onDelete: Cascade)
  
  @@unique([userId, courseId])
  @@map("certificates")
}

model Review {
  id          String   @id @default(cuid())
  userId      String
  courseId    String
  rating      Int      @db.SmallInt
  comment     String?
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  
  // Relations
  user        User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  course      Course   @relation(fields: [courseId], references: [id], onDelete: Cascade)
  
  @@unique([userId, courseId])
  @@map("reviews")
}

model CourseFavorite {
  id          String   @id @default(cuid())
  userId      String
  courseId    String
  createdAt   DateTime @default(now())
  
  // Relations
  user        User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  course      Course   @relation(fields: [courseId], references: [id], onDelete: Cascade)
  
  @@unique([userId, courseId])
  @@map("course_favorites")
}

model Test {
  id          String   @id @default(cuid())
  lessonId    String?
  title       String
  description String?
  timeLimit   Int?     // in minutes
  passingScore Int     @default(70) // percentage
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  
  // Relations
  lesson      Lesson?  @relation(fields: [lessonId], references: [id], onDelete: Cascade)
  questions   TestQuestion[]
  attempts    TestAttempt[]
  lessons     Lesson[] // Lessons that reference this test
  
  @@map("tests")
}

model TestQuestion {
  id          String   @id @default(cuid())
  testId      String
  questionText String
  questionType String  @default("multiple_choice")
  options     Json     // array of answer options
  correctAnswer String
  points      Int      @default(1)
  questionOrder Int
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  
  // Relations
  test        Test     @relation(fields: [testId], references: [id], onDelete: Cascade)
  
  @@map("test_questions")
}

model TestAttempt {
  id          String   @id @default(cuid())
  userId      String
  testId      String
  score       Int      @default(0)
  percentage  Decimal  @default(0) @db.Decimal(5, 2)
  passed      Boolean  @default(false)
  answers     Json?    // detailed answer data
  completedAt DateTime @default(now())
  createdAt   DateTime @default(now())
  
  // Relations
  user        User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  test        Test     @relation(fields: [testId], references: [id], onDelete: Cascade)
  
  @@map("test_attempts")
}

enum UserRole {
  STUDENT
  TEACHER
  ADMIN
}

enum LessonType {
  VIDEO
  TEST
  READING
  ASSIGNMENT
  LIVE_SESSION
  QUIZ
} 
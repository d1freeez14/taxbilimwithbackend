const { query } = require('../lib/db');
const bcrypt = require('bcryptjs');

async function main() {
  try {
    console.log('üå± Starting database seeding...');

    // Create admin user
    const adminPassword = await bcrypt.hash('admin123', 10);
    const adminResult = await query(
      'INSERT INTO users (email, password, name, role) VALUES ($1, $2, $3, $4) ON CONFLICT (email) DO UPDATE SET name = EXCLUDED.name RETURNING id, email, name, role',
      ['admin@taxbilim.com', adminPassword, 'Admin User', 'ADMIN']
    );
    const admin = adminResult.rows[0];

    // Create teacher user
    const teacherPassword = await bcrypt.hash('teacher123', 10);
    const teacherResult = await query(
      'INSERT INTO users (email, password, name, role) VALUES ($1, $2, $3, $4) ON CONFLICT (email) DO UPDATE SET name = EXCLUDED.name RETURNING id, email, name, role',
      ['teacher@taxbilim.com', teacherPassword, 'Teacher User', 'TEACHER']
    );
    const teacher = teacherResult.rows[0];

    // Create student user
    const studentPassword = await bcrypt.hash('student123', 10);
    const studentResult = await query(
      'INSERT INTO users (email, password, name, role) VALUES ($1, $2, $3, $4) ON CONFLICT (email) DO UPDATE SET name = EXCLUDED.name RETURNING id, email, name, role',
      ['student@taxbilim.com', studentPassword, 'Student User', 'STUDENT']
    );
    const student = studentResult.rows[0];

    // Create author
    const authorResult = await query(
      'INSERT INTO authors (name, avatar, bio) VALUES ($1, $2, $3) RETURNING id, name, avatar',
      ['–õ–∞–Ω–∞ –ë.', '/avatars.png', 'Expert tax consultant with 10+ years of experience']
    );
    const author = authorResult.rows[0];

    // Create sample courses
    const course1Result = await query(
      `INSERT INTO courses (title, description, image_src, price, bg, is_published, is_sales_leader, is_recorded, features, what_you_learn, author_id) 
       VALUES ($1, $2, $3, $4, $5, $6, $7, $8, $9, $10, $11) 
       RETURNING id, title`,
      [
        '–û—Å–Ω–æ–≤—ã –Ω–∞–ª–æ–≥–æ–æ–±–ª–æ–∂–µ–Ω–∏—è',
        '–ö–æ–º–ø–ª–µ–∫—Å–Ω—ã–π –∫—É—Ä—Å –ø–æ –æ—Å–Ω–æ–≤–∞–º –Ω–∞–ª–æ–≥–æ–æ–±–ª–æ–∂–µ–Ω–∏—è –¥–ª—è –Ω–∞—á–∏–Ω–∞—é—â–∏—Ö. –ò–∑—É—á–∏—Ç–µ –æ—Å–Ω–æ–≤–Ω—ã–µ –ø—Ä–∏–Ω—Ü–∏–ø—ã, –≤–∏–¥—ã –Ω–∞–ª–æ–≥–æ–≤ –∏ –∏—Ö –ø—Ä–∏–º–µ–Ω–µ–Ω–∏–µ –≤ –ö–∞–∑–∞—Ö—Å—Ç–∞–Ω–µ.',
        '/coursePlaceholder.png',
        25990.00,
        'white',
        true,
        true,
        true,
        ['5 –ú–æ–¥—É–ª–µ–π', '78 –≤–∏–¥–µ–æ—É—Ä–æ–∫–æ–≤', '7 —Å—Ç–∞—Ç–µ–π', '10 —Ä–µ—Å—É—Ä—Å–æ–≤ –¥–ª—è —Å–∫–∞—á–∏–≤–∞–Ω–∏—è', '–ü–æ–ª–Ω—ã–π –ø–æ–∂–∏–∑–Ω–µ–Ω–Ω—ã–π –¥–æ—Å—Ç—É–ø', '–°–µ—Ä—Ç–∏—Ñ–∏–∫–∞—Ç –æ–± –æ–∫–æ–Ω—á–∞–Ω–∏–∏'],
        ['–ü–æ–Ω–∏–º–∞–Ω–∏–µ –æ—Å–Ω–æ–≤–Ω—ã—Ö –ø—Ä–∏–Ω—Ü–∏–ø–æ–≤ –Ω–∞–ª–æ–≥–æ–æ–±–ª–æ–∂–µ–Ω–∏—è', '–í–∏–¥—ã –Ω–∞–ª–æ–≥–æ–≤ –∏ –∏—Ö –ø—Ä–∏–º–µ–Ω–µ–Ω–∏–µ', '–ù–∞–ª–æ–≥–æ–≤–∞—è –æ—Ç—á–µ—Ç–Ω–æ—Å—Ç—å –∏ –¥–µ–∫–ª–∞—Ä–∞—Ü–∏–∏', '–ü—Ä–∞–∫—Ç–∏—á–µ—Å–∫–∏–µ –ø—Ä–∏–º–µ—Ä—ã –∏ –∫–µ–π—Å—ã'],
        author.id
      ]
    );
    const course1 = course1Result.rows[0];

    const course2Result = await query(
      `INSERT INTO courses (title, description, image_src, price, bg, is_published, is_sales_leader, is_recorded, features, what_you_learn, author_id) 
       VALUES ($1, $2, $3, $4, $5, $6, $7, $8, $9, $10, $11) 
       RETURNING id, title`,
      [
        '–ù–î–° –¥–ª—è –±–∏–∑–Ω–µ—Å–∞',
        '–ü–æ–¥—Ä–æ–±–Ω—ã–π –∫—É—Ä—Å –ø–æ –ù–î–° –¥–ª—è –ø—Ä–µ–¥–ø—Ä–∏–Ω–∏–º–∞—Ç–µ–ª–µ–π –∏ –±—É—Ö–≥–∞–ª—Ç–µ—Ä–æ–≤. –ü—Ä–∞–∫—Ç–∏—á–µ—Å–∫–∏–µ –ø—Ä–∏–º–µ—Ä—ã –∏ –∞–∫—Ç—É–∞–ª—å–Ω–æ–µ –∑–∞–∫–æ–Ω–æ–¥–∞—Ç–µ–ª—å—Å—Ç–≤–æ.',
        '/coursePlaceholder.png',
        35990.00,
        'white',
        true,
        true,
        true,
        ['6 –ú–æ–¥—É–ª–µ–π', '95 –≤–∏–¥–µ–æ—É—Ä–æ–∫–æ–≤', '12 —Å—Ç–∞—Ç–µ–π', '15 —Ä–µ—Å—É—Ä—Å–æ–≤ –¥–ª—è —Å–∫–∞—á–∏–≤–∞–Ω–∏—è', '–ü–æ–ª–Ω—ã–π –ø–æ–∂–∏–∑–Ω–µ–Ω–Ω—ã–π –¥–æ—Å—Ç—É–ø', '–°–µ—Ä—Ç–∏—Ñ–∏–∫–∞—Ç –æ–± –æ–∫–æ–Ω—á–∞–Ω–∏–∏'],
        ['–û—Å–Ω–æ–≤—ã –ù–î–° –∏ –µ–≥–æ —Ä–∞—Å—á–µ—Ç', '–ù–î–° –≤ —Ä–∞–∑–ª–∏—á–Ω—ã—Ö –æ–ø–µ—Ä–∞—Ü–∏—è—Ö', '–ù–∞–ª–æ–≥–æ–≤—ã–µ –≤—ã—á–µ—Ç—ã –∏ –≤–æ–∑–º–µ—â–µ–Ω–∏–µ', '–≠–ª–µ–∫—Ç—Ä–æ–Ω–Ω–∞—è –æ—Ç—á–µ—Ç–Ω–æ—Å—Ç—å –ø–æ –ù–î–°'],
        author.id
      ]
    );
    const course2 = course2Result.rows[0];

    // Create modules for course 1
    const module1Result = await query(
      'INSERT INTO modules (title, "order", course_id) VALUES ($1, $2, $3) RETURNING id, title',
      ['–ú–æ–¥—É–ª—å 1: –í–≤–µ–¥–µ–Ω–∏–µ –≤ –Ω–∞–ª–æ–≥–æ–æ–±–ª–æ–∂–µ–Ω–∏–µ', 1, course1.id]
    );
    const module1 = module1Result.rows[0];

    const module2Result = await query(
      'INSERT INTO modules (title, "order", course_id) VALUES ($1, $2, $3) RETURNING id, title',
      ['–ú–æ–¥—É–ª—å 2: –í–∏–¥—ã –Ω–∞–ª–æ–≥–æ–≤', 2, course1.id]
    );
    const module2 = module2Result.rows[0];

    // Create lessons for module 1
    const lesson1Result = await query(
      'INSERT INTO lessons (title, content, "order", module_id, duration) VALUES ($1, $2, $3, $4, $5) RETURNING id, title',
      ['–£—Ä–æ–∫ 1: –ß—Ç–æ —Ç–∞–∫–æ–µ –Ω–∞–ª–æ–≥–∏', '–í —ç—Ç–æ–º —É—Ä–æ–∫–µ –º—ã –∏–∑—É—á–∏–º –æ—Å–Ω–æ–≤–Ω—ã–µ –ø–æ–Ω—è—Ç–∏—è –Ω–∞–ª–æ–≥–æ–æ–±–ª–æ–∂–µ–Ω–∏—è...', 1, module1.id, 15]
    );
    const lesson1 = lesson1Result.rows[0];

    const lesson2Result = await query(
      'INSERT INTO lessons (title, content, "order", module_id, duration) VALUES ($1, $2, $3, $4, $5) RETURNING id, title',
      ['–£—Ä–æ–∫ 2: –§—É–Ω–∫—Ü–∏–∏ –Ω–∞–ª–æ–≥–æ–≤', '–†–∞—Å—Å–º–æ—Ç—Ä–∏–º –æ—Å–Ω–æ–≤–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏ –Ω–∞–ª–æ–≥–æ–≤ –≤ —ç–∫–æ–Ω–æ–º–∏–∫–µ...', 2, module1.id, 20]
    );
    const lesson2 = lesson2Result.rows[0];

    const lesson3Result = await query(
      'INSERT INTO lessons (title, content, "order", module_id, duration) VALUES ($1, $2, $3, $4, $5) RETURNING id, title',
      ['–£—Ä–æ–∫ 3: –ù–∞–ª–æ–≥–æ–≤–∞—è —Å–∏—Å—Ç–µ–º–∞ –†–ö', '–ò–∑—É—á–∏–º —Å—Ç—Ä—É–∫—Ç—É—Ä—É –Ω–∞–ª–æ–≥–æ–≤–æ–π —Å–∏—Å—Ç–µ–º—ã –ö–∞–∑–∞—Ö—Å—Ç–∞–Ω–∞...', 3, module1.id, 25]
    );
    const lesson3 = lesson3Result.rows[0];

    // Create lessons for module 2
    const lesson4Result = await query(
      'INSERT INTO lessons (title, content, "order", module_id, duration) VALUES ($1, $2, $3, $4, $5) RETURNING id, title',
      ['–£—Ä–æ–∫ 1: –ü—Ä—è–º—ã–µ –Ω–∞–ª–æ–≥–∏', '–ò–∑—É—á–∏–º –ø—Ä—è–º—ã–µ –Ω–∞–ª–æ–≥–∏ –∏ –∏—Ö –æ—Å–æ–±–µ–Ω–Ω–æ—Å—Ç–∏...', 1, module2.id, 18]
    );
    const lesson4 = lesson4Result.rows[0];

    const lesson5Result = await query(
      'INSERT INTO lessons (title, content, "order", module_id, duration) VALUES ($1, $2, $3, $4, $5) RETURNING id, title',
      ['–£—Ä–æ–∫ 2: –ö–æ—Å–≤–µ–Ω–Ω—ã–µ –Ω–∞–ª–æ–≥–∏', '–†–∞—Å—Å–º–æ—Ç—Ä–∏–º –∫–æ—Å–≤–µ–Ω–Ω—ã–µ –Ω–∞–ª–æ–≥–∏ –∏ –∏—Ö –ø—Ä–∏–º–µ–Ω–µ–Ω–∏–µ...', 2, module2.id, 22]
    );
    const lesson5 = lesson5Result.rows[0];

    // Create modules for course 2
    const module3Result = await query(
      'INSERT INTO modules (title, "order", course_id) VALUES ($1, $2, $3) RETURNING id, title',
      ['–ú–æ–¥—É–ª—å 1: –û—Å–Ω–æ–≤—ã –ù–î–°', 1, course2.id]
    );
    const module3 = module3Result.rows[0];

    const module4Result = await query(
      'INSERT INTO modules (title, "order", course_id) VALUES ($1, $2, $3) RETURNING id, title',
      ['–ú–æ–¥—É–ª—å 2: –†–∞—Å—á–µ—Ç –ù–î–°', 2, course2.id]
    );
    const module4 = module4Result.rows[0];

    // Create lessons for course 2 modules
    const lesson6Result = await query(
      'INSERT INTO lessons (title, content, "order", module_id, duration) VALUES ($1, $2, $3, $4, $5) RETURNING id, title',
      ['–£—Ä–æ–∫ 1: –ü–æ–Ω—è—Ç–∏–µ –ù–î–°', '–í–≤–µ–¥–µ–Ω–∏–µ –≤ –Ω–∞–ª–æ–≥ –Ω–∞ –¥–æ–±–∞–≤–ª–µ–Ω–Ω—É—é —Å—Ç–æ–∏–º–æ—Å—Ç—å...', 1, module3.id, 20]
    );
    const lesson6 = lesson6Result.rows[0];

    const lesson7Result = await query(
      'INSERT INTO lessons (title, content, "order", module_id, duration) VALUES ($1, $2, $3, $4, $5) RETURNING id, title',
      ['–£—Ä–æ–∫ 2: –ù–∞–ª–æ–≥–æ–≤–∞—è –±–∞–∑–∞ –ù–î–°', '–ò–∑—É—á–∏–º –Ω–∞–ª–æ–≥–æ–≤—É—é –±–∞–∑—É –¥–ª—è —Ä–∞—Å—á–µ—Ç–∞ –ù–î–°...', 2, module3.id, 25]
    );
    const lesson7 = lesson7Result.rows[0];

    const lesson8Result = await query(
      'INSERT INTO lessons (title, content, "order", module_id, duration) VALUES ($1, $2, $3, $4, $5) RETURNING id, title',
      ['–£—Ä–æ–∫ 1: –§–æ—Ä–º—É–ª–∞ —Ä–∞—Å—á–µ—Ç–∞ –ù–î–°', '–ü—Ä–∞–∫—Ç–∏—á–µ—Å–∫–∏–µ –ø—Ä–∏–º–µ—Ä—ã —Ä–∞—Å—á–µ—Ç–∞ –ù–î–°...', 1, module4.id, 30]
    );
    const lesson8 = lesson8Result.rows[0];

    // Create test for lesson 3 (Module 1 test)
    const test1Result = await query(
      'INSERT INTO tests (lesson_id, title, description, time_limit, passing_score) VALUES ($1, $2, $3, $4, $5) RETURNING id',
      [lesson3.id, '–¢–µ—Å—Ç –ø–æ –æ—Å–Ω–æ–≤–∞–º –Ω–∞–ª–æ–≥–æ–æ–±–ª–æ–∂–µ–Ω–∏—è', '–ü—Ä–æ–≤–µ—Ä—å—Ç–µ —Å–≤–æ–∏ –∑–Ω–∞–Ω–∏—è –ø–æ –æ—Å–Ω–æ–≤–∞–º –Ω–∞–ª–æ–≥–æ–æ–±–ª–æ–∂–µ–Ω–∏—è', 30, 70]
    );
    const test1 = test1Result.rows[0];

    // Create test questions
    const questions = [
      {
        question_text: '–ß—Ç–æ —Ç–∞–∫–æ–µ –Ω–∞–ª–æ–≥?',
        options: ['A) –î–æ–±—Ä–æ–≤–æ–ª—å–Ω—ã–π –≤–∑–Ω–æ—Å', '–ë) –û–±—è–∑–∞—Ç–µ–ª—å–Ω—ã–π –ø–ª–∞—Ç–µ–∂', '–í) –ü–æ–¥–∞—Ä–æ–∫ –≥–æ—Å—É–¥–∞—Ä—Å—Ç–≤—É', '–ì) –ë–ª–∞–≥–æ—Ç–≤–æ—Ä–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å'],
        correct_answer: '–ë) –û–±—è–∑–∞—Ç–µ–ª—å–Ω—ã–π –ø–ª–∞—Ç–µ–∂',
        points: 2
      },
      {
        question_text: '–ö–∞–∫–∞—è –æ—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –Ω–∞–ª–æ–≥–æ–≤?',
        options: ['A) –†–∞–∑–≤–ª–µ–∫–∞—Ç–µ–ª—å–Ω–∞—è', '–ë) –§–∏—Å–∫–∞–ª—å–Ω–∞—è', '–í) –î–µ–∫–æ—Ä–∞—Ç–∏–≤–Ω–∞—è', '–ì) –†–µ–∫–ª–∞–º–Ω–∞—è'],
        correct_answer: '–ë) –§–∏—Å–∫–∞–ª—å–Ω–∞—è',
        points: 2
      },
      {
        question_text: '–ö—Ç–æ —è–≤–ª—è–µ—Ç—Å—è –ø–ª–∞—Ç–µ–ª—å—â–∏–∫–æ–º –Ω–∞–ª–æ–≥–æ–≤ –≤ –†–ö?',
        options: ['A) –¢–æ–ª—å–∫–æ —Ñ–∏–∑–∏—á–µ—Å–∫–∏–µ –ª–∏—Ü–∞', '–ë) –¢–æ–ª—å–∫–æ —é—Ä–∏–¥–∏—á–µ—Å–∫–∏–µ –ª–∏—Ü–∞', '–í) –§–∏–∑–∏—á–µ—Å–∫–∏–µ –∏ —é—Ä–∏–¥–∏—á–µ—Å–∫–∏–µ –ª–∏—Ü–∞', '–ì) –¢–æ–ª—å–∫–æ –∏–Ω–æ—Å—Ç—Ä–∞–Ω—Ü—ã'],
        correct_answer: '–í) –§–∏–∑–∏—á–µ—Å–∫–∏–µ –∏ —é—Ä–∏–¥–∏—á–µ—Å–∫–∏–µ –ª–∏—Ü–∞',
        points: 3
      },
      {
        question_text: '–ö–∞–∫–æ–π –æ—Ä–≥–∞–Ω –æ—Ç–≤–µ—á–∞–µ—Ç –∑–∞ –Ω–∞–ª–æ–≥–æ–≤—É—é –ø–æ–ª–∏—Ç–∏–∫—É –≤ –†–ö?',
        options: ['A) –ú–∏–Ω–∏—Å—Ç–µ—Ä—Å—Ç–≤–æ –æ–±—Ä–∞–∑–æ–≤–∞–Ω–∏—è', '–ë) –ú–∏–Ω–∏—Å—Ç–µ—Ä—Å—Ç–≤–æ —Ñ–∏–Ω–∞–Ω—Å–æ–≤', '–í) –ú–∏–Ω–∏—Å—Ç–µ—Ä—Å—Ç–≤–æ —Å–ø–æ—Ä—Ç–∞', '–ì) –ú–∏–Ω–∏—Å—Ç–µ—Ä—Å—Ç–≤–æ –∫—É–ª—å—Ç—É—Ä—ã'],
        correct_answer: '–ë) –ú–∏–Ω–∏—Å—Ç–µ—Ä—Å—Ç–≤–æ —Ñ–∏–Ω–∞–Ω—Å–æ–≤',
        points: 2
      },
      {
        question_text: '–ß—Ç–æ –æ–∑–Ω–∞—á–∞–µ—Ç –ø—Ä–∏–Ω—Ü–∏–ø —Å–ø—Ä–∞–≤–µ–¥–ª–∏–≤–æ—Å—Ç–∏ –≤ –Ω–∞–ª–æ–≥–æ–æ–±–ª–æ–∂–µ–Ω–∏–∏?',
        options: ['A) –í—Å–µ –ø–ª–∞—Ç—è—Ç –æ–¥–∏–Ω–∞–∫–æ–≤–æ', '–ë) –ë–æ–≥–∞—Ç—ã–µ –ø–ª–∞—Ç—è—Ç –±–æ–ª—å—à–µ', '–í) –ë–µ–¥–Ω—ã–µ –Ω–µ –ø–ª–∞—Ç—è—Ç', '–ì) –ù–∞–ª–æ–≥–∏ –∑–∞–≤–∏—Å—è—Ç –æ—Ç —Å–ø–æ—Å–æ–±–Ω–æ—Å—Ç–∏ –ø–ª–∞—Ç–∏—Ç—å'],
        correct_answer: '–ì) –ù–∞–ª–æ–≥–∏ –∑–∞–≤–∏—Å—è—Ç –æ—Ç —Å–ø–æ—Å–æ–±–Ω–æ—Å—Ç–∏ –ø–ª–∞—Ç–∏—Ç—å',
        points: 3
      }
    ];

    for (let i = 0; i < questions.length; i++) {
      const question = questions[i];
      await query(
        'INSERT INTO test_questions (test_id, question_text, question_type, options, correct_answer, points, question_order) VALUES ($1, $2, $3, $4, $5, $6, $7)',
        [test1.id, question.question_text, 'multiple_choice', JSON.stringify(question.options), question.correct_answer, question.points, i + 1]
      );
    }

    // Enroll student in course 1
    await query(
      'INSERT INTO enrollments (user_id, course_id) VALUES ($1, $2) ON CONFLICT (user_id, course_id) DO NOTHING',
      [student.id, course1.id]
    );

    // Add some reviews
    await query(
      'INSERT INTO reviews (user_id, course_id, rating, comment) VALUES ($1, $2, $3, $4) ON CONFLICT (user_id, course_id) DO NOTHING',
      [student.id, course1.id, 5, '–û—Ç–ª–∏—á–Ω—ã–π –∫—É—Ä—Å! –û—á–µ–Ω—å –ø–æ–Ω—è—Ç–Ω–æ –æ–±—ä—è—Å–Ω—è—é—Ç —Å–ª–æ–∂–Ω—ã–µ —Ç–µ–º—ã.']
    );

    await query(
      'INSERT INTO reviews (user_id, course_id, rating, comment) VALUES ($1, $2, $3, $4) ON CONFLICT (user_id, course_id) DO NOTHING',
      [student.id, course2.id, 4, '–•–æ—Ä–æ—à–∏–π –∫—É—Ä—Å –ø–æ –ù–î–°, –º–Ω–æ–≥–æ –ø—Ä–∞–∫—Ç–∏—á–µ—Å–∫–∏—Ö –ø—Ä–∏–º–µ—Ä–æ–≤.']
    );

    // Add some favorites
    await query(
      'INSERT INTO course_favorites (user_id, course_id) VALUES ($1, $2) ON CONFLICT (user_id, course_id) DO NOTHING',
      [student.id, course1.id]
    );

    console.log('‚úÖ Database seeded successfully!');
    console.log('üë• Created users:');
    console.log(`   Admin: ${admin.email} (password: admin123)`);
    console.log(`   Teacher: ${teacher.email} (password: teacher123)`);
    console.log(`   Student: ${student.email} (password: student123)`);
    console.log('üìö Created courses and modules');
    console.log('üéì Created enrollments and reviews');
    console.log('üìù Created test with 5 questions');
  } catch (error) {
    console.error('‚ùå Error seeding database:', error);
    throw error;
  }
}

main()
  .catch((e) => {
    console.error('‚ùå Error seeding database:', e);
    process.exit(1);
  }); 